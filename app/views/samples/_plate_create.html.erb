<% content_for :meta do %>
<meta name="turbolinks-visit-control" content="reload">
<% end %>
<div class="container table-responsive">
    <%= form_with(model: @plate, url: step3_sample_bulkprepared_path, local: true) do |form| %>
    <% if @plate.errors.any? %>
    <div id="error_explanation">
        <h2><%= pluralize(@plate.errors.count, "error") %> prohibited this test from being saved:</h2>
        <ul>
            <% @plate.errors.full_messages.each do |message| %>
            <li><%= message %></li>
            <% end %>
        </ul>
    </div>
    <% end %>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th></th>
                <% PlateHelper.columns.each do |col| %>
                <th><%= col %></th>
                <% end %>
            </tr>
        </thead>
        <tbody>
            <% @plate.wells.sort_by{|w| w.row}.group_by {|w| w.row }.each do |row, row_wells| %>
            <tr>
                <td class="dark-cell text-center"><%= row %></td>
                <%= form.fields_for :wells, row_wells.sort_by{|w|w.column} do |builder| %>
                <% if auto_control?(builder.object.row, builder.object.column) %>
                <td class="auto-control-cell" data-control="auto">
                    <% elsif control?(builder.object.row, builder.object.column) %>
                <td class="control-cell" data-control="manual">
                    <% else %>
                <td>
                    <% end %>
                    <%= builder.hidden_field :row, name: '[sample_well_mapping][mappings][][row]'  %>
                    <%= builder.hidden_field :row  %>
                    <%= builder.hidden_field :column, name: '[sample_well_mapping][mappings][][column]'  %>
                    <%= builder.hidden_field :column  %>
                    <%= builder.fields_for :sample, Sample.new do |sample_builder| %>
                    <% if auto_control?(builder.object.row, builder.object.column) %>
                    <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][id]', class:"form-control control-well", disabled: true, placeholder: 'N/A', tabindex: get_focus_index(builder.object) %>
                    <%= sample_builder.hidden_field :control, name: '[sample_well_mapping][mappings][][control]', value: true %>
                    <% elsif control?(builder.object.row, builder.object.column) %>
                    <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][control_code]', class:"form-control control-well", tabindex: get_focus_index(builder.object) %>
                    <%= sample_builder.hidden_field :control, name: '[sample_well_mapping][mappings][][control]', value: true %>
                    <% else %>
                    <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][id]', class:"form-control sample-assign", tabindex: get_focus_index(builder.object) %>
                    <%= sample_builder.hidden_field :control, name: '[sample_well_mapping][mappings][][control]', value: false %>
                    <% end %>
                    <% end %>
                </td>
                <% end %>
            </tr>
            <% end  %>
        </tbody>
    </table>
    <div class="actions d-flex justify-content-between">
        <%= form.submit "Create Plate", class: 'btn btn-primary' %>
        <%= form.button "Reset Plate", type: 'reset', class: 'btn btn-danger', data: {confirm: "Clear All?", turbolinks: false} %>
    </div>
    <% end %>
    <div class="d-flex justify-content-end mt-2">
        <%= button_tag "Reload Samples", type: nil, id: 'reloadPending', class: 'btn btn-warning' %>
    </div>
    <div class="modal" tabindex="-1" role="dialog" id="exampleModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Select sample by client</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="clientA">Client A</button>
                    <button type="button" class="btn btn-info" id="clientB">Client B</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).on('turbolinks:load', function() {

        var cell_index = 0

        let pending_samples = []

        function setSamples() {
            let items = Array.from($('[data-set-item]')).map(i => {
                return i.getAttribute("data-set-item");
            });

            return Array.from(items);
        };

        $(window).keydown(function(event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });

        function mapSamples(items, setter) {
            mapped = items.map(item => {
                console.log(item)
                return {
                    label: item.uid,
                    value: item.id.toString(),
                    client: item.client
                }
            });
            setter(mapped)
            return Promise.resolve();
        }


        function getSamples() {
            fetch('/samples/pendingprepare.json')
                .then(res => res.json())
                .then(js => mapSamples(js, i => pending_samples = i))
        }

        function validateInput(item, success, failure) {
            if (setSamples().includes(item.value)) {
                const err = 'Sample has already been assigned to a well';
                failure(err);
            } else {
                if (typeof success === 'function') {
                    success(item);
                } else {
                    return
                }
            }
        }

        function handleDeletion(event) {
            const uid = event.currentTarget.value;
            if (uid == null || uid == "") {
                oldValue = event.currentTarget.getAttribute('data-set-item');
                if (oldValue) {
                    setIndex = setSamples().indexOf(oldValue)
                    if (setIndex == -1) {
                        alert("cannot remove sample not set")
                        return;
                    }
                    event.currentTarget.removeAttribute('data-set-item')
                }
                return
            }
        }

        function debounce(func, wait, immediate) {
            var timeout;
            return function() {
                var context = this,
                    args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        function tabNext(event) {
            const currentTabIndex = Number(event.currentTarget.getAttribute('tabindex'))
            const selector = `[tabindex=${currentTabIndex +1}]`
            $(selector).focus()
        }

        function notSetMulti(filtered){
            const set = setSamples()
            if(set.includes(filtered[0].value || set.inclues(filtered[1].value))){
                return false
            }
            return true
        }

        function setWrapper(event){
            const uid = event.currentTarget.value
            if (uid.length == 0) return
            const filtered = pending_samples.filter(p => p.label == uid || p.value == uid)
            if (filtered && filtered.length == 1){
                const item = filtered[0]
                if (item && item.value == event.currentTarget.getAttribute('data-set-item')) {
                    event.currentTarget.value = item.value
                    return
                }
                if (!item) {
                    event.currentTarget.value = event.currentTarget.getAttribute('data-set-item');
                    alert("Cannot set sample ID " + uid);
                    return
                }
                setValue(event, item);
                return

            }else if(filtered && filtered.length == 2){
                console.log('multiple results found')
                var modal = $('#exampleModal')
                modal.find('.modal-title').text('Select Sample Client for UID ' + filtered[0].label)
                modal.find('.modal-body p').text(`Select between ${filtered[0].client} and ${filtered[1].client}`)
                const buttonA = modal.find('#clientA')
                const buttonB = modal.find('#clientB')
                
                buttonA.text(filtered[0].client)
                buttonB.text(filtered[1].client)
                buttonA.off('click.setA')
                buttonB.off('click.setB')
                buttonA.on('click.setA', () => {
                    setValue(event, filtered[0])
                    $('#exampleModal').hide()
                    })
                buttonB.on('click.setB', () => {
                    setValue(event, filtered[1])
                    $('#exampleModal').hide()
                    })
                $('#exampleModal').show()
                
                return
            }else{}


        }

        // function handleSet(event) {
        //     const uid = event.currentTarget.value
        //     if (uid.length > 0) {
        //         item = pending_samples.filter(p => p.label == uid || p.value == uid)

        //         if (item && item.length == 1 && item[0].value == event.currentTarget.getAttribute('data-set-item')) {
        //             event.currentTarget.value = item[0].value
        //             return
        //         }
        //         if (!item || item.length == 0) {
        //             event.currentTarget.value = event.currentTarget.getAttribute('data-set-item');
        //             alert("Cannot set sample ID " + uid);
        //             return
        //         }
        //         if (item && item.length > 1) {
        //             console.log('multiple results found')
        //             var modal = $('#exampleModal')
        //             modal.find('.modal-title').text('Select Sample Client for UID ' + item[0].label)
        //             modal.find('.modal-body p').text(`Select between ${item[0].client} and ${item[1].client}`)
        //             const buttonA = modal.find('#clientA')
        //             const buttonB = modal.find('#clientB')
                    
        //             buttonA.text(item[0].client)
        //             buttonB.text(item[1].client)
                    
        //             $('#exampleModal').show()
        //             return
        //         }
                
        //         validateInput(item, (match) => {
        //             const setValue = event.currentTarget.getAttribute('data-set-item')
        //             if (setValue) {
        //                 const canWrite = confirm(`Overwrite ${setValue} ?`)
        //                 if (!canWrite) {
        //                     event.currentTarget.value = setValue
        //                     return
        //                 }
        //             }
        //             event.currentTarget.value = match.value
        //             event.currentTarget.setAttribute('data-set-item', match.value)
        //             tabNext(event);
        //         }, (err) => {
        //             event.currentTarget.value = event.currentTarget.getAttribute('data-set-item');
        //             alert(err);
        //         })
        //     }
        // }

        function setValue(event, item){
            validateInput(item, (match) => {
                    const setValue = event.currentTarget.getAttribute('data-set-item')
                    if (setValue) {
                        const canWrite = confirm(`Overwrite ${setValue} ?`)
                        if (!canWrite) {
                            event.currentTarget.value = setValue
                            return
                        }
                    }
                    event.currentTarget.value = match.value
                    event.currentTarget.setAttribute('data-set-item', match.value)
                    tabNext(event);
                }, (err) => {
                    event.currentTarget.value = event.currentTarget.getAttribute('data-set-item');
                    alert(err);
                })
        }


        function handleControl(event) {
            if (event.currentTarget.value != <%= Sample::CONTROL_CODE %> ) {
                event.currentTarget.value = null;
                alert('invalid control code')
                return;
            }

            tabNext(event);
        }

        $(".control-well").on('input', debounce(handleControl, 500));
        $(".sample-assign").on('input', handleDeletion);
        $(".sample-assign").on('input', debounce(setWrapper, 500));
        $('#reloadPending').on('click', getSamples);
        getSamples()
    });
</script>