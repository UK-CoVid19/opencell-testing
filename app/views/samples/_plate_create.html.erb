<div class="container table-responsive">
    <%= form_with(model: @plate, url: step3_sample_bulkprepared_path) do |form| %>
    <% if @plate.errors.any? %>
    <div id="error_explanation">
        <h2><%= pluralize(@plate.errors.count, "error") %> prohibited this test from being saved:</h2>
        <ul>
            <% @plate.errors.full_messages.each do |message| %>
            <li><%= message %></li>
            <% end %>
        </ul>
    </div>
    <% end %>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th></th>
                <% PlateHelper.columns.each do |col| %>
                <th><%= col %></th>
                <% end %>
            </tr>
        </thead>
        <tbody>
            <% @plate.wells.sort_by{|w| w.row}.group_by {|w| w.row }.each do |row, row_wells| %>
            <tr>
                <td class="dark-cell text-center"><%= row %></td>
                <%= form.fields_for :wells, row_wells.sort_by{|w|w.column} do |builder| %>
                <% if auto_control?(builder.object.row, builder.object.column) %>
                <td class="auto-control-cell" data-control="auto">
                    <% elsif control?(builder.object.row, builder.object.column) %>
                <td class="control-cell" data-control="manual">
                    <% else %>
                <td>
                    <% end %>
                    <%= builder.hidden_field :row, name: '[sample_well_mapping][mappings][][row]'  %>
                    <%= builder.hidden_field :row  %>
                    <%= builder.hidden_field :column, name: '[sample_well_mapping][mappings][][column]'  %>
                    <%= builder.hidden_field :column  %>
                    <%= builder.fields_for :sample, Sample.new do |sample_builder| %>
                    <% if auto_control?(builder.object.row, builder.object.column) %>
                    <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][id]', class:"form-control", disabled: true, placeholder: 'N/A' %>
                    <%= sample_builder.hidden_field :control, name: '[sample_well_mapping][mappings][][control]', value: true %>
                    <% elsif control?(builder.object.row, builder.object.column) %>
                    <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][control_code]', class:"form-control" %>
                    <%= sample_builder.hidden_field :control, name: '[sample_well_mapping][mappings][][control]', value: true %>
                    <% else %>
                    <%= sample_builder.text_field :id, name: '[sample_well_mapping][mappings][][id]', class:"form-control sample-assign" %>
                    <%= sample_builder.hidden_field :control, name: '[sample_well_mapping][mappings][][control]', value: false %>
                    <% end %>
                    <% end %>
                </td>
                <% end %>
            </tr>
            <% end  %>
        </tbody>
    </table>
    <div class="actions">
        <%= form.submit "Create Plate", class: 'btn btn-primary' %>
    </div>
    <% end %>
</div>
<script>
    $(document).on('turbolinks:load', function() {

        var cell_index = 0

        let pending_samples = []
        let setSamples = []

        $(window).keydown(function(event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });


        function mapSamples(items, setter) {
            mapped = items.map(item => {
                return {
                    label: item.uid,
                    value: item.id.toString()
                }
            });
            setter(mapped)
            return Promise.resolve();
        }

        fetch('/samples/pendingprepare.json')
            .then(res => res.json())
            .then(js => mapSamples(js, i => pending_samples = i))

        function getRemainingSamples() {
            to_complete = pending_samples.filter(x => !setSamples.includes(x.value.toString()));
            return to_complete;
        }

        function validateInput(sampleId, success, failure) {
            item = pending_samples.find(p => p.label == sampleId || p.value == sampleId)
            if (!item) {
                const err = 'You cannot process this sample ID ' + sampleId;
                failure(err)
            } else {
                if (setSamples.includes(item.value)) {
                    const err = 'Sample has already been assigned to a well';

                    failure(err);
                } else {
                    if (typeof success === 'function') {
                        success(item);
                    } else {
                        return
                    }

                }
            }
        }

         function handleDeletion(event) {
            const uid = event.currentTarget.value;
            if (uid == null || uid == "") {
                oldValue = event.currentTarget.getAttribute('data-set-item');
                if (oldValue) {
                    setIndex = setSamples.indexOf(oldValue)
                    if (setIndex == -1) {
                        alert("cannot remove sample not set")
                        return;
                    }
                    setSamples.splice(setIndex, 1)
                    event.currentTarget.removeAttribute('data-set-item')
                }
                return
            }
        }
        
        function debounce(func, wait, immediate) {
            var timeout;
            return function() {
                var context = this,
                    args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        function handleSet(event, uid){
            if (uid.length > 1) {
                validateInput(uid, (match) => {
                    event.currentTarget.value = match.value
                    event.currentTarget.setAttribute('data-set-item', match.value)
                    setSamples.push(match.value)
                }, (err) => {
                    event.currentTarget.value = null;
                    alert(err);
                })
            }
        }

        function handleInput(event) {
            const uid = event.currentTarget.value;
            // deletion should always be immediate
            handleDeletion(event);
            debounce(handleSet, 500)(event, uid);
        }

        $(".sample-assign").on('input', handleInput);

    });
</script>