<table class="table table-striped table-bordered">
    <thead class="thead-dark">
        <tr>
            <th></th>
            <% (1..12).each do |col| %>
            <th><%= col %></th>
            <% end %>
        </tr>
    </thead>
    <tbody>
        <% @plate.wells.sort_by{|w| w.row}.group_by {|w| w.row }.each do |row, row_wells| %>
        <tr>
            <td class="dark-cell text-center" style="width:4rem;"><%= row %></td>
            <% row_wells.sort_by{|w| w.column}.each do |rw| %>
            <% if control?(rw.row, rw.column) %>
              <td style="max-width:3rem;" class="p-2 control-cell">
            <% else %>
              <td style="max-width:3rem;" class="p-2">
            <% end %>
                <% if test.test_results.map(&:well_id).include? rw.id %>
                <%= form.fields_for :test_results, test.test_results.select{|i| i.well_id == rw.id} do |result_builder| %>
                <%= result_builder.hidden_field :well_id %>
                <%= result_builder.hidden_field :test_id %>
                <%= result_builder.hidden_field :id %>
                <%= result_builder.text_field :comment, class: 'form-control m-2' %>
                <%= result_builder.select :state, TestResult.states.map {|key, val| [key.humanize, key]},{}, {class: 'form-control m-2'} %>
                <% unless control?(rw.row, rw.column) || retest_disabled?(rw) %>
                <button type="button" class="btn btn-primary retestbutton" data-toggle="modal" data-target="#exampleModal" data-sample-uid=<%= rw.sample.uid %> data-sample-id=<%= rw.sample.id %>>Retest</button>
                <% end %>
                <% end %>
                <% else %>
                <hr />
                <% end %>
            </td>
            <% end %>
        </tr>
        <% end %>
    </tbody>
</table>

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">New message</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Retesting will <strong>STOP</strong> notification of test results and create a new test </p>
        <input name="sample-id" id="sampleid" type="text" hidden>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-success" id="positiveClick">Retest Positive</button>
        <button type="button" class="btn btn-info" id="inconclusiveClick">Retest Inconclusive</button>
      </div>
    </div>
  </div>
</div>

<script>
$(document).on('turbolinks:load', function() {
  $('#exampleModal').on('show.bs.modal', function (event) {
    var button = $(event.relatedTarget) // Button that triggered the modal
    var sampleId = button.data('sample-id') // Extract info from data-* attributes
    var uid = button.data('sample-uid')
    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
    var modal = $(this)
    modal.find('.modal-title').text('Retest Sample ' + sampleId + ': ' + uid)
    modal.find('.modal-body input').val(sampleId)
    modal.find('#positiveClick').data('sample', sampleId)
    modal.find('#inconclusiveClick').data('sample', sampleId)
  })


  function retestPositive(event){
    sendRequest('retestpositive').then(() => {
      // set positive to disable
      const sampleId = $(event.target).data('sample')
      $(`.retestbutton[data-sample-id=${sampleId}]`).prop('disabled', true)
    })
  }

  function retestInconclusive(event){
    sendRequest('retestinconclusive').then(() => {
      const sampleId = $(event.target).data('sample')
      $(`.retestbutton[data-sample-id=${sampleId}]`).prop('disabled', true)
    })
  }

  function sendRequest(endpoint){
    const sampleId = document.getElementById('sampleid').value
    const token = document.querySelector('meta[name="csrf-token"]').content
    const url =  `/samples/${sampleId}/${endpoint}`

    return new Promise((resolve, reject) => {
      fetch(url, {method: 'POST', redirect: 'follow', headers: {'X-CSRF-TOKEN': token}})
      .then(resp => {
        if(!resp.ok){
          throw Error(response.statusText)
        }
        $('#exampleModal').modal('toggle');
        resolve();
        }
      ).catch(err => {
        alert('Could not complete request')
        reject();
        })
      }
    )
  }
    

  document.getElementById ("positiveClick").addEventListener ("click", retestPositive);
  document.getElementById ("inconclusiveClick").addEventListener ("click", retestInconclusive);

})

</script>